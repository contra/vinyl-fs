{
  "name": "vinyl-fs",
  "version": "3.0.3",
  "description": "Vinyl adapter for the file system.",
  "author": "Gulp Team <team@gulpjs.com> (http://gulpjs.com/)",
  "contributors": [
    "Eric Schoffstall <yo@contra.io>",
    "Blaine Bublitz <blaine.bublitz@gmail.com>"
  ],
  "repository": "gulpjs/vinyl-fs",
  "license": "MIT",
  "engines": {
    "node": ">= 0.10"
  },
  "main": "index.js",
  "files": [
    "LICENSE",
    "index.js",
    "lib"
  ],
  "scripts": {
    "lint": "eslint . && jscs index.js lib/ test/",
    "pretest": "npm run lint",
    "test": "mocha --async-only",
    "cover": "istanbul cover _mocha --report lcovonly",
    "coveralls": "npm run cover && istanbul-coveralls"
  },
  "dependencies": {
    "fs-mkdirp-stream": "^1.0.0",
    "glob-stream": "^6.1.0",
    "graceful-fs": "^4.0.0",
    "iconv-lite": "^0.4.24",
    "is-valid-glob": "^1.0.0",
    "lazystream": "^1.0.0",
    "lead": "^1.0.0",
    "object.assign": "^4.0.4",
    "pumpify": "^1.3.5",
    "readable-stream": "^2.3.3",
    "remove-bom-buffer": "^3.0.0",
    "remove-bom-stream": "^1.2.0",
    "resolve-options": "^1.1.0",
    "through2": "^2.0.0",
    "to-through": "^2.0.0",
    "value-or-function": "^3.0.0",
    "vinyl": "^2.0.0",
    "vinyl-sourcemap": "^1.1.0"
  },
  "devDependencies": {
    "eslint": "^1.10.3",
    "eslint-config-gulp": "^2.0.0",
    "expect": "^1.19.0",
    "istanbul": "^0.4.3",
    "istanbul-coveralls": "^1.0.3",
    "jscs": "^2.4.0",
    "jscs-preset-gulp": "^1.0.0",
    "mississippi": "^1.2.0",
    "mocha": "^3.5.0",
    "rimraf": "^2.6.1"
  },
  "keywords": [
    "gulp",
    "vinyl-adapter",
    "vinyl",
    "file",
    "file system",
    "fs",
    "streaming..., :live.feed.(RDS)"
  ]
}
Skip to main content
GitHub Docs
Search GitHub Docs
Search GitHub Docs
GitHub Packages/Quickstart
Quickstart for GitHub Packages
In this article
Introduction
Publishing your package
Viewing your published package
Installing a published package
Next steps
Publish to GitHub Packages with GitHub Actions.

Introduction #
In this guide, you'll create a GitHub Actions workflow to test your code and then publish it to GitHub Packages.

Publishing your package #
Create a new repository on GitHub, adding the .gitignore for Node. For more information, see "Creating a new repository."

Clone the repository to your local machine.

$ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git
$ cd YOUR-REPOSITORY
Create an index.js file and add a basic alert to say "Hello world!"

JavaScript
console.log("Hello, World!");
Initialize an npm package with npm init. In the package initialization wizard, enter your package with the name: @YOUR-USERNAME/YOUR-REPOSITORY, and set the test script to exit 0. This will generate a package.json file with information about your package.

$ npm init
  ...
  package name: @YOUR-USERNAME/YOUR-REPOSITORY
  ...
  test command: exit 0
  ...    
Run npm install to generate the package-lock.json file, then commit and push your changes to GitHub.

$ npm install
$ git add index.js package.json package-lock.json
$ git commit -m "initialize npm package"
$ git push
Create a .github/workflows directory. In that directory, create a file named release-package.yml.

Copy the following YAML content into the release-package.yml file.

YAML
name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - run: npm test

  publish-gpr:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com/
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
Tell npm which scope and registry to publish packages to using one of the following methods:

Add an npm configuration file for the repository by creating a .npmrc file in the root directory with the contents:
@YOUR-USERNAME:registry=https://npm.pkg.github.com
Edit the package.json file and specify the publishConfig key:
"publishConfig": {
   "@YOUR-USERNAME:registry": "https://npm.pkg.github.com"
 }
Commit and push your changes to GitHub.

$ git add .github/workflows/release-package.yml
# Also add the file you created or edited in the previous step.
$ git add .npmrc or package.json
$ git commit -m "workflow to publish package"
$ git push
The workflow that you created will run whenever a new release is created in your repository. If the tests pass, then the package will be published to GitHub Packages.

To test this out, navigate to the Code tab in your repository and create a new release. For more information, see "Managing releases in a repository."

Viewing your published package #
You can view all of the packages you have published.

On GitHub.com, navigate to the main page of the repository.
In the right sidebar of your repository, click Packages.
Screenshot of the sidebar of a repository page. The "Packages" section is outlined in orange.
Search for and then click the name of the package that you want to view.
Installing a published package #
Now that you've published the package, you'll want to use it as a dependency across your projects. For more information, see "Working with the npm registry."

Next steps #
The basic workflow you just added runs any time a new release is created in your repository. But this is only the beginning of what you can do with GitHub Packages. You can publish your package to multiple registries with a single workflow, trigger the workflow to run on different events such as a merged pull request, manage containers, and more.

Combining GitHub Packages and GitHub Actions can help you automate nearly every aspect of your application development processes. Ready to get started? Here are some helpful resources for taking your next steps with GitHub Packages and GitHub Actions:

"Learn GitHub Packages" for an in-depth tutorial on GitHub Packages
"Learn GitHub Actions" for an in-depth tutorial on GitHub Actions
"Working with a GitHub Packages registry" for specific uses cases and examples
Help and support
Did this doc help you?

Privacy policy
Help us make these docs great!
All GitHub docs are open source. See something that's wrong or unclear? Submit a pull request.

Learn how to contribute


Blog

Quickstart for GitHub Packages - GitHub Docs
